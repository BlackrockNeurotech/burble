use std::num::NonZeroU8;

use bitflags::bitflags;

use crate::gap::uuid16_enum;

bitflags! {
    /// Characteristic properties ([Vol 3] Part G, Section 3.3.1.1).
    #[derive(Default)]
    #[repr(transparent)]
    pub struct Prop: u8 {
        /// Permits broadcasts of the Characteristic Value using Server
        /// Characteristic Configuration Descriptor. If set, the Server
        /// Characteristic Configuration Descriptor shall exist.
        const BROADCAST = 0x01;
        /// Permits reads of the Characteristic Value.
        const READ = 0x02;
        /// Permit writes of the Characteristic Value without response.
        const WRITE_CMD = 0x04;
        /// Permits writes of the Characteristic Value with response.
        const WRITE = 0x08;
        /// Permits notifications of a Characteristic Value without
        /// acknowledgment. If set, the Client Characteristic Configuration
        /// Descriptor shall exist.
        const NOTIFY = 0x10;
        /// Permits indications of a Characteristic Value with acknowledgment.
        /// If set, the Client Characteristic Configuration Descriptor shall
        /// exist.
        const INDICATE = 0x20;
        /// Permits signed writes to the Characteristic Value.
        const SIGNED_WRITE_CMD = 0x40;
        /// Additional characteristic properties are defined in the
        /// Characteristic Extended Properties Descriptor. If set, the
        /// Characteristic Extended Properties Descriptor shall exist.
        const EXT_PROPS = 0x80;
    }
}

bitflags! {
    /// Characteristic extended properties ([Vol 3] Part G, Section 3.3.3.1).
    #[derive(Default)]
    #[repr(transparent)]
    pub struct ExtProp: u16 {
        /// Permits reliable writes of the Characteristic Value.
        const RELIABLE_WRITE = 1 << 0;
        /// Permits writes to the Characteristic User Description descriptor.
        const WRITABLE_AUX = 1 << 1;
    }
}

bitflags! {
    /// Client Characteristic Configuration descriptor value
    /// ([Vol 3] Part G, Section 3.3.3.3).
    #[derive(Default)]
    #[repr(transparent)]
    pub struct ClientCfg: u8 {
        /// The Characteristic Value shall be notified. This value can only be
        /// set if the characteristic's properties have the `NOTIFY` bit set.
        const NOTIFY = 1 << 0;
        /// The Characteristic Value shall be indicated. This value can only be
        /// set if the characteristic's properties have the `INDICATE` bit set.
        const INDICATE = 1 << 0;
    }
}

/// Characteristic presentation format types ([Assigned Numbers] Section 2.4.1).
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    PartialEq,
    num_enum::IntoPrimitive,
    num_enum::TryFromPrimitive,
    strum::Display,
)]
#[non_exhaustive]
#[repr(u8)]
pub enum Format {
    /// Unsigned 1-bit (0 = falseÍ¾ 1 = true).
    Bool = 0x01,
    /// Unsigned 2-bit integer.
    U2 = 0x02,
    /// Unsigned 4-bit integer.
    U4 = 0x03,
    /// Unsigned 8-bit integer.
    U8 = 0x04,
    /// Unsigned 12-bit integer.
    U12 = 0x05,
    /// Unsigned 16-bit integer.
    U16 = 0x06,
    /// Unsigned 24-bit integer.
    U24 = 0x07,
    /// Unsigned 32-bit integer.
    U32 = 0x08,
    /// Unsigned 48-bit integer.
    U48 = 0x09,
    /// Unsigned 64-bit integer.
    U64 = 0x0A,
    /// Unsigned 128-bit integer.
    U128 = 0x0B,
    /// Signed 8-bit integer.
    I8 = 0x0C,
    /// Signed 12-bit integer.
    I12 = 0x0D,
    /// Signed 16-bit integer.
    I16 = 0x0E,
    /// Signed 24-bit integer.
    I24 = 0x0F,
    /// Signed 32-bit integer.
    I32 = 0x10,
    /// Signed 48-bit integer.
    I48 = 0x11,
    /// Signed 64-bit integer.
    I64 = 0x12,
    /// Signed 128-bit integer.
    I128 = 0x13,
    /// IEEE-754 32-bit floating point.
    F32 = 0x14,
    /// IEEE-754 64-bit floating point.
    F64 = 0x15,
    /// IEEE 11073-20601 16-bit SFLOAT.
    MedF16 = 0x16,
    /// IEEE 11073-20601 32-bit FLOAT.
    MedF32 = 0x17,
    /// IEEE 11073-20601 nomenclature code.
    U16x2 = 0x18, // TODO: Proper name?
    /// UTF-8 string.
    Utf8 = 0x19,
    /// UTF-16 string.
    Utf16 = 0x1A,
    /// Opaque structure.
    Struct = 0x1B,
}

/// Characteristic presentation format description
/// ([Assigned Numbers] Section 2.4.2.1).
#[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd, strum::Display)]
#[non_exhaustive]
pub enum Description {
    Unknown,
    Nth(NonZeroU8),
    Front,
    Back,
    Top,
    Bottom,
    Upper,
    Lower,
    Main,
    Backup,
    Auxiliary,
    Supplementary,
    Flash,
    Inside,
    Outside,
    Left,
    Right,
    Internal,
    External,
}

impl Description {
    /// Creates a description for the `N`th item, where `N > 0`.
    #[inline]
    #[must_use]
    pub const fn nth(n: u8) -> Self {
        // TODO: Use expect when const stable
        match NonZeroU8::new(n) {
            Some(n) => Self::Nth(n),
            None => panic!("n cannot be zero"),
        }
    }

    /// Returns the raw description namespace.
    #[inline(always)]
    #[must_use]
    pub const fn ns(self) -> u8 {
        0x01 // [Assigned Numbers] Section 2.4.2
    }

    /// Returns the raw description ID.
    #[must_use]
    pub const fn raw(self) -> u16 {
        use Description::*;
        match self {
            Unknown => 0x0000,
            Nth(n) => n.get() as u16,
            Front => 0x0100,
            Back => 0x0101,
            Top => 0x0102,
            Bottom => 0x0103,
            Upper => 0x0104,
            Lower => 0x0105,
            Main => 0x0106,
            Backup => 0x0107,
            Auxiliary => 0x0108,
            Supplementary => 0x0109,
            Flash => 0x010A,
            Inside => 0x010B,
            Outside => 0x010C,
            Left => 0x010D,
            Right => 0x010E,
            Internal => 0x010F,
            External => 0x0110,
        }
    }
}

impl From<Description> for u16 {
    #[inline]
    fn from(d: Description) -> Self {
        d.raw()
    }
}

/// GATT services ([Assigned Numbers] Section 3.4.2).
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    Ord,
    PartialEq,
    PartialOrd,
    num_enum::IntoPrimitive,
    num_enum::TryFromPrimitive,
    strum::Display,
)]
#[cfg_attr(test, derive(strum::EnumIter))]
#[non_exhaustive]
#[repr(u16)]
pub enum Service {
    GenericAccess = 0x1800,
    GenericAttribute = 0x1801,
    ImmediateAlert = 0x1802,
    LinkLoss = 0x1803,
    TxPower = 0x1804,
    CurrentTime = 0x1805,
    ReferenceTimeUpdate = 0x1806,
    NextDstChange = 0x1807,
    Glucose = 0x1808,
    HealthThermometer = 0x1809,
    DeviceInformation = 0x180A,
    HeartRate = 0x180D,
    PhoneAlertStatus = 0x180E,
    Battery = 0x180F,
    BloodPressure = 0x1810,
    AlertNotification = 0x1811,
    HumanInterfaceDevice = 0x1812,
    ScanParameters = 0x1813,
    RunningSpeedAndCadence = 0x1814,
    AutomationIo = 0x1815,
    CyclingSpeedAndCadence = 0x1816,
    CyclingPower = 0x1818,
    LocationAndNavigation = 0x1819,
    EnvironmentalSensing = 0x181A,
    BodyComposition = 0x181B,
    UserData = 0x181C,
    WeightScale = 0x181D,
    BondManagement = 0x181E,
    ContinuousGlucoseMonitoring = 0x181F,
    InternetProtocolSupport = 0x1820,
    IndoorPositioning = 0x1821,
    PulseOximeter = 0x1822,
    HttpProxy = 0x1823,
    TransportDiscovery = 0x1824,
    ObjectTransfer = 0x1825,
    FitnessMachine = 0x1826,
    MeshProvisioning = 0x1827,
    MeshProxy = 0x1828,
    ReconnectionConfiguration = 0x1829,
    InsulinDelivery = 0x183A,
    BinarySensor = 0x183B,
    EmergencyConfiguration = 0x183C,
    AuthorizationControl = 0x183D,
    PhysicalActivityMonitor = 0x183E,
    AudioInputControl = 0x1843,
    VolumeControl = 0x1844,
    VolumeOffsetControl = 0x1845,
    CoordinatedSetIdentification = 0x1846,
    DeviceTime = 0x1847,
    MediaControl = 0x1848,
    GenericMediaControl = 0x1849,
    ConstantToneExtension = 0x184A,
    TelephoneBearer = 0x184B,
    GenericTelephoneBearer = 0x184C,
    MicrophoneControl = 0x184D,
    AudioStreamControl = 0x184E,
    BroadcastAudioScan = 0x184F,
    PublishedAudioCapabilities = 0x1850,
    BasicAudioAnnouncement = 0x1851,
    BroadcastAudioAnnouncement = 0x1852,
    CommonAudio = 0x1853,
    HearingAid = 0x1854,
    Tmas = 0x1855,
    PublicBroadcastAnnouncement = 0x1856,
}

/// Characteristic presentation format units ([Assigned Numbers] Section 3.5.2).
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    Ord,
    PartialEq,
    PartialOrd,
    num_enum::IntoPrimitive,
    num_enum::TryFromPrimitive,
    strum::Display,
)]
#[cfg_attr(test, derive(strum::EnumIter))]
#[non_exhaustive]
#[repr(u16)]
pub enum Unit {
    None = 0x2700,
    Metres = 0x2701,
    Kilograms = 0x2702,
    Seconds = 0x2703,
    Amperes = 0x2704,
    Kelvins = 0x2705,
    Moles = 0x2706,
    Candelas = 0x2707,
    SquareMetres = 0x2710,
    CubicMetres = 0x2711,
    MetresPerSecond = 0x2712,
    MetresPerSecondSquared = 0x2713,
    ReciprocalMetres = 0x2714,
    KilogramsPerCubicMetre = 0x2715,
    KilogramsPerSquareMetre = 0x2716,
    CubicMetresPerKilogram = 0x2717,
    AmperesPerSquareMetre = 0x2718,
    AmperesPerMetre = 0x2719,
    MolesPerCubicMetre = 0x271A,
    ConcentrationKilogramsPerCubicMetre = 0x271B,
    CandelasPerSquareMetre = 0x271C,
    RefractiveIndex = 0x271D,
    RelativePermeability = 0x271E,
    Radians = 0x2720,
    Steradians = 0x2721,
    Hertz = 0x2722,
    Newtons = 0x2723,
    Pascals = 0x2724,
    Joules = 0x2725,
    Watts = 0x2726,
    Coulombs = 0x2727,
    Volts = 0x2728,
    Farads = 0x2729,
    Ohms = 0x272A,
    Siemens = 0x272B,
    Webers = 0x272C,
    Tesla = 0x272D,
    Henries = 0x272E,
    Celsius = 0x272F,
    Lumens = 0x2730,
    Lux = 0x2731,
    Becquerels = 0x2732,
    Grays = 0x2733,
    Sieverts = 0x2734,
    Katals = 0x2735,
    PascalSeconds = 0x2740,
    NewtonMetres = 0x2741,
    NewtonsPerMetre = 0x2742,
    RadiansPerSecond = 0x2743,
    RadiansPerSecondSquared = 0x2744,
    FluxWattsPerSquareMetre = 0x2745,
    JoulesPerKelvin = 0x2746,
    JoulesPerKilogramKelvin = 0x2747,
    JoulesPerKilogram = 0x2748,
    WattsPerMetreKelvin = 0x2749,
    JoulesPerCubicMetre = 0x274A,
    VoltsPerMetre = 0x274B,
    CoulombsPerCubicMetre = 0x274C,
    CoulombsPerSquareMetre = 0x274D,
    FluxCoulombsPerSquareMetre = 0x274E,
    FaradsPerMetre = 0x274F,
    HenriesPerMetre = 0x2750,
    JoulesPerMole = 0x2751,
    JoulesPerMoleKelvin = 0x2752,
    CoulombsPerKilogram = 0x2753,
    GraysPerSecond = 0x2754,
    WattsPerSteradian = 0x2755,
    WattsPerSquareMetreSteradian = 0x2756,
    KatalsPerCubicMetre = 0x2757,
    Minutes = 0x2760,
    Hours = 0x2761,
    Days = 0x2762,
    Degrees = 0x2763,
    DegreeMinutes = 0x2764,
    DegreeSeconds = 0x2765,
    Hectares = 0x2766,
    Litres = 0x2767,
    Tonnes = 0x2768,
    Bars = 0x2780,
    MillimetresOfMercury = 0x2781,
    Angstroms = 0x2782,
    NauticalMiles = 0x2783,
    Barns = 0x2784,
    Knots = 0x2785,
    Nepers = 0x2786,
    Bels = 0x2787,
    Yards = 0x27A0,
    Parsecs = 0x27A1,
    Inches = 0x27A2,
    Feet = 0x27A3,
    Miles = 0x27A4,
    PoundsPerSquareInch = 0x27A5,
    KilometresPerHour = 0x27A6,
    MilesPerHour = 0x27A7,
    RevolutionsPerMinute = 0x27A8,
    GramCalories = 0x27A9,
    KilogramCalories = 0x27AA,
    KilowattHours = 0x27AB,
    Fahrenheit = 0x27AC,
    Percent = 0x27AD,
    PerMille = 0x27AE,
    BeatsPerMinute = 0x27AF,
    AmpereHours = 0x27B0,
    MilligramsPerDecilitre = 0x27B1,
    MillimolesPerLitre = 0x27B2,
    Years = 0x27B3,
    Months = 0x27B4,
    CountsPerCubicMetre = 0x27B5,
    WattsPerSquareMetre = 0x27B6,
    MillilitersPerKilogramPerMinute = 0x27B7,
    Pounds = 0x27B8,
    MetabolicEquivalent = 0x27B9,
    StepsPerMinute = 0x27BA,
    StrokesPerMinute = 0x27BC,
    KilometresPerMinute = 0x27BD,
    LumensPerWatt = 0x27BE,
    LumenHours = 0x27BF,
    LuxHours = 0x27C0,
    GramsPerSecond = 0x27C1,
    LitresPerSecond = 0x27C2,
    Decibels = 0x27C3,
    PartsPerMillion = 0x27C4,
    PartsPerBillion = 0x27C5,
    MilligramsPerDecilitrePerMinute = 0x27C6,
    KilovoltAmpereHours = 0x27C7,
    VoltAmperes = 0x27C8,
}

/// Declarations ([Assigned Numbers] Section 3.6).
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    Ord,
    PartialEq,
    PartialOrd,
    num_enum::IntoPrimitive,
    num_enum::TryFromPrimitive,
    strum::Display,
)]
#[cfg_attr(test, derive(strum::EnumIter))]
#[non_exhaustive]
#[repr(u16)]
pub enum Declaration {
    PrimaryService = 0x2800,
    SecondaryService = 0x2801,
    Include = 0x2802,
    Characteristic = 0x2803,
}

/// Descriptors ([Assigned Numbers] Section 3.7).
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    Ord,
    PartialEq,
    PartialOrd,
    num_enum::IntoPrimitive,
    num_enum::TryFromPrimitive,
    strum::Display,
)]
#[cfg_attr(test, derive(strum::EnumIter))]
#[non_exhaustive]
#[repr(u16)]
pub enum Descriptor {
    CharacteristicExtendedProperties = 0x2900,
    CharacteristicUserDescription = 0x2901,
    ClientCharacteristicConfiguration = 0x2902,
    ServerCharacteristicConfiguration = 0x2903,
    CharacteristicPresentationFormat = 0x2904,
    CharacteristicAggregateFormat = 0x2905,
    ValidRange = 0x2906,
    ExternalReportReference = 0x2907,
    ReportReference = 0x2908,
    NumberOfDigitals = 0x2909,
    ValueTriggerSetting = 0x290A,
    EnvironmentalSensingConfiguration = 0x290B,
    EnvironmentalSensingMeasurement = 0x290C,
    EnvironmentalSensingTriggerSetting = 0x290D,
    TimeTriggerSetting = 0x290E,
    CompleteBredrTransportBlockData = 0x290F,
}

/// Characteristics ([Assigned Numbers] Section 3.8.2).
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    Ord,
    PartialEq,
    PartialOrd,
    num_enum::IntoPrimitive,
    num_enum::TryFromPrimitive,
    strum::Display,
)]
#[cfg_attr(test, derive(strum::EnumIter))]
#[non_exhaustive]
#[repr(u16)]
pub enum Characteristic {
    DeviceName = 0x2A00,
    Appearance = 0x2A01,
    PeripheralPrivacyFlag = 0x2A02,
    ReconnectionAddress = 0x2A03,
    PeripheralPreferredConnectionParameters = 0x2A04,
    ServiceChanged = 0x2A05,
    AlertLevel = 0x2A06,
    TxPowerLevel = 0x2A07,
    DateTime = 0x2A08,
    DayOfWeek = 0x2A09,
    DayDateTime = 0x2A0A,
    ExactTime256 = 0x2A0C,
    DstOffset = 0x2A0D,
    TimeZone = 0x2A0E,
    LocalTimeInformation = 0x2A0F,
    TimeWithDst = 0x2A11,
    TimeAccuracy = 0x2A12,
    TimeSource = 0x2A13,
    ReferenceTimeInformation = 0x2A14,
    TimeUpdateControlPoint = 0x2A16,
    TimeUpdateState = 0x2A17,
    GlucoseMeasurement = 0x2A18,
    BatteryLevel = 0x2A19,
    TemperatureMeasurement = 0x2A1C,
    TemperatureType = 0x2A1D,
    IntermediateTemperature = 0x2A1E,
    MeasurementInterval = 0x2A21,
    BootKeyboardInputReport = 0x2A22,
    SystemId = 0x2A23,
    ModelNumberString = 0x2A24,
    SerialNumberString = 0x2A25,
    FirmwareRevisionString = 0x2A26,
    HardwareRevisionString = 0x2A27,
    SoftwareRevisionString = 0x2A28,
    ManufacturerNameString = 0x2A29,
    IeeeRegulatoryCertificationDataList = 0x2A2A,
    CurrentTime = 0x2A2B,
    MagneticDeclination = 0x2A2C,
    ScanRefresh = 0x2A31,
    BootKeyboardOutputReport = 0x2A32,
    BootMouseInputReport = 0x2A33,
    GlucoseMeasurementContext = 0x2A34,
    BloodPressureMeasurement = 0x2A35,
    IntermediateCuffPressure = 0x2A36,
    HeartRateMeasurement = 0x2A37,
    BodySensorLocation = 0x2A38,
    HeartRateControlPoint = 0x2A39,
    AlertStatus = 0x2A3F,
    RingerControlPoint = 0x2A40,
    RingerSetting = 0x2A41,
    AlertCategoryIdBitMask = 0x2A42,
    AlertCategoryId = 0x2A43,
    AlertNotificationControlPoint = 0x2A44,
    UnreadAlertStatus = 0x2A45,
    NewAlert = 0x2A46,
    SupportedNewAlertCategory = 0x2A47,
    SupportedUnreadAlertCategory = 0x2A48,
    BloodPressureFeature = 0x2A49,
    HidInformation = 0x2A4A,
    ReportMap = 0x2A4B,
    HidControlPoint = 0x2A4C,
    Report = 0x2A4D,
    ProtocolMode = 0x2A4E,
    ScanIntervalWindow = 0x2A4F,
    PnpId = 0x2A50,
    GlucoseFeature = 0x2A51,
    RecordAccessControlPoint = 0x2A52,
    RscMeasurement = 0x2A53,
    RscFeature = 0x2A54,
    ScControlPoint = 0x2A55,
    Aggregate = 0x2A5A,
    CscMeasurement = 0x2A5B,
    CscFeature = 0x2A5C,
    SensorLocation = 0x2A5D,
    PlxSpotCheckMeasurement = 0x2A5E,
    PlxContinuousMeasurement = 0x2A5F,
    PlxFeatures = 0x2A60,
    CyclingPowerMeasurement = 0x2A63,
    CyclingPowerVector = 0x2A64,
    CyclingPowerFeature = 0x2A65,
    CyclingPowerControlPoint = 0x2A66,
    LocationAndSpeed = 0x2A67,
    Navigation = 0x2A68,
    PositionQuality = 0x2A69,
    LnFeature = 0x2A6A,
    LnControlPoint = 0x2A6B,
    Elevation = 0x2A6C,
    Pressure = 0x2A6D,
    Temperature = 0x2A6E,
    Humidity = 0x2A6F,
    TrueWindSpeed = 0x2A70,
    TrueWindDirection = 0x2A71,
    ApparentWindSpeed = 0x2A72,
    ApparentWindDirection = 0x2A73,
    GustFactor = 0x2A74,
    PollenConcentration = 0x2A75,
    UvIndex = 0x2A76,
    Irradiance = 0x2A77,
    Rainfall = 0x2A78,
    WindChill = 0x2A79,
    HeatIndex = 0x2A7A,
    DewPoint = 0x2A7B,
    DescriptorValueChanged = 0x2A7D,
    AerobicHeartRateLowerLimit = 0x2A7E,
    AerobicThreshold = 0x2A7F,
    Age = 0x2A80,
    AnaerobicHeartRateLowerLimit = 0x2A81,
    AnaerobicHeartRateUpperLimit = 0x2A82,
    AnaerobicThreshold = 0x2A83,
    AerobicHeartRateUpperLimit = 0x2A84,
    DateOfBirth = 0x2A85,
    DateOfThresholdAssessment = 0x2A86,
    EmailAddress = 0x2A87,
    FatBurnHeartRateLowerLimit = 0x2A88,
    FatBurnHeartRateUpperLimit = 0x2A89,
    FirstName = 0x2A8A,
    FiveZoneHeartRateLimits = 0x2A8B,
    Gender = 0x2A8C,
    HeartRateMax = 0x2A8D,
    Height = 0x2A8E,
    HipCircumference = 0x2A8F,
    LastName = 0x2A90,
    MaximumRecommendedHeartRate = 0x2A91,
    RestingHeartRate = 0x2A92,
    SportTypeForAerobicAndAnaerobicThresholds = 0x2A93,
    ThreeZoneHeartRateLimits = 0x2A94,
    TwoZoneHeartRateLimits = 0x2A95,
    Vo2Max = 0x2A96,
    WaistCircumference = 0x2A97,
    Weight = 0x2A98,
    DatabaseChangeIncrement = 0x2A99,
    UserIndex = 0x2A9A,
    BodyCompositionFeature = 0x2A9B,
    BodyCompositionMeasurement = 0x2A9C,
    WeightMeasurement = 0x2A9D,
    WeightScaleFeature = 0x2A9E,
    UserControlPoint = 0x2A9F,
    MagneticFluxDensity2D = 0x2AA0,
    MagneticFluxDensity3D = 0x2AA1,
    Language = 0x2AA2,
    BarometricPressureTrend = 0x2AA3,
    BondManagementControlPoint = 0x2AA4,
    BondManagementFeature = 0x2AA5,
    CentralAddressResolution = 0x2AA6,
    CgmMeasurement = 0x2AA7,
    CgmFeature = 0x2AA8,
    CgmStatus = 0x2AA9,
    CgmSessionStartTime = 0x2AAA,
    CgmSessionRunTime = 0x2AAB,
    CgmSpecificOpsControlPoint = 0x2AAC,
    IndoorPositioningConfiguration = 0x2AAD,
    Latitude = 0x2AAE,
    Longitude = 0x2AAF,
    LocalNorthCoordinate = 0x2AB0,
    LocalEastCoordinate = 0x2AB1,
    FloorNumber = 0x2AB2,
    Altitude = 0x2AB3,
    Uncertainty = 0x2AB4,
    LocationName = 0x2AB5,
    Uri = 0x2AB6,
    HttpHeaders = 0x2AB7,
    HttpStatusCode = 0x2AB8,
    HttpEntityBody = 0x2AB9,
    HttpControlPoint = 0x2ABA,
    HttpsSecurity = 0x2ABB,
    TdsControlPoint = 0x2ABC,
    OtsFeature = 0x2ABD,
    ObjectName = 0x2ABE,
    ObjectType = 0x2ABF,
    ObjectSize = 0x2AC0,
    ObjectFirstCreated = 0x2AC1,
    ObjectLastModified = 0x2AC2,
    ObjectId = 0x2AC3,
    ObjectProperties = 0x2AC4,
    ObjectActionControlPoint = 0x2AC5,
    ObjectListControlPoint = 0x2AC6,
    ObjectListFilter = 0x2AC7,
    ObjectChanged = 0x2AC8,
    ResolvablePrivateAddressOnly = 0x2AC9,
    FitnessMachineFeature = 0x2ACC,
    TreadmillData = 0x2ACD,
    CrossTrainerData = 0x2ACE,
    StepClimberData = 0x2ACF,
    StairClimberData = 0x2AD0,
    RowerData = 0x2AD1,
    IndoorBikeData = 0x2AD2,
    TrainingStatus = 0x2AD3,
    SupportedSpeedRange = 0x2AD4,
    SupportedInclinationRange = 0x2AD5,
    SupportedResistanceLevelRange = 0x2AD6,
    SupportedHeartRateRange = 0x2AD7,
    SupportedPowerRange = 0x2AD8,
    FitnessMachineControlPoint = 0x2AD9,
    FitnessMachineStatus = 0x2ADA,
    MeshProvisioningDataIn = 0x2ADB,
    MeshProvisioningDataOut = 0x2ADC,
    MeshProxyDataIn = 0x2ADD,
    MeshProxyDataOut = 0x2ADE,
    AverageCurrent = 0x2AE0,
    AverageVoltage = 0x2AE1,
    Boolean = 0x2AE2,
    ChromaticDistanceFromPlanckian = 0x2AE3,
    ChromaticityCoordinates = 0x2AE4,
    ChromaticityInCctAndDuvValues = 0x2AE5,
    ChromaticityTolerance = 0x2AE6,
    CieColorRenderingIndex = 0x2AE7,
    Coefficient = 0x2AE8,
    CorrelatedColorTemperature = 0x2AE9,
    Count16 = 0x2AEA,
    Count24 = 0x2AEB,
    CountryCode = 0x2AEC,
    DateUtc = 0x2AED,
    ElectricCurrent = 0x2AEE,
    ElectricCurrentRange = 0x2AEF,
    ElectricCurrentSpecification = 0x2AF0,
    ElectricCurrentStatistics = 0x2AF1,
    Energy = 0x2AF2,
    EnergyInAPeriodOfDay = 0x2AF3,
    EventStatistics = 0x2AF4,
    FixedString16 = 0x2AF5,
    FixedString24 = 0x2AF6,
    FixedString36 = 0x2AF7,
    FixedString8 = 0x2AF8,
    GenericLevel = 0x2AF9,
    GlobalTradeItemNumber = 0x2AFA,
    Illuminance = 0x2AFB,
    LuminousEfficacy = 0x2AFC,
    LuminousEnergy = 0x2AFD,
    LuminousExposure = 0x2AFE,
    LuminousFlux = 0x2AFF,
    LuminousFluxRange = 0x2B00,
    LuminousIntensity = 0x2B01,
    MassFlow = 0x2B02,
    PerceivedLightness = 0x2B03,
    Percentage8 = 0x2B04,
    Power = 0x2B05,
    PowerSpecification = 0x2B06,
    RelativeRuntimeInACurrentRange = 0x2B07,
    RelativeRuntimeInAGenericLevelRange = 0x2B08,
    RelativeValueInAVoltageRange = 0x2B09,
    RelativeValueInAnIlluminanceRange = 0x2B0A,
    RelativeValueInAPeriodOfDay = 0x2B0B,
    RelativeValueInATemperatureRange = 0x2B0C,
    Temperature8 = 0x2B0D,
    Temperature8InAPeriodOfDay = 0x2B0E,
    Temperature8Statistics = 0x2B0F,
    TemperatureRange = 0x2B10,
    TemperatureStatistics = 0x2B11,
    TimeDecihour8 = 0x2B12,
    TimeExponential8 = 0x2B13,
    TimeHour24 = 0x2B14,
    TimeMillisecond24 = 0x2B15,
    TimeSecond16 = 0x2B16,
    TimeSecond8 = 0x2B17,
    Voltage = 0x2B18,
    VoltageSpecification = 0x2B19,
    VoltageStatistics = 0x2B1A,
    VolumeFlow = 0x2B1B,
    ChromaticityCoordinate = 0x2B1C,
    RcFeature = 0x2B1D,
    RcSettings = 0x2B1E,
    ReconnectionConfigurationControlPoint = 0x2B1F,
    IddStatusChanged = 0x2B20,
    IddStatus = 0x2B21,
    IddAnnunciationStatus = 0x2B22,
    IddFeatures = 0x2B23,
    IddStatusReaderControlPoint = 0x2B24,
    IddCommandControlPoint = 0x2B25,
    IddCommandData = 0x2B26,
    IddRecordAccessControlPoint = 0x2B27,
    IddHistoryData = 0x2B28,
    ClientSupportedFeatures = 0x2B29,
    DatabaseHash = 0x2B2A,
    BssControlPoint = 0x2B2B,
    BssResponse = 0x2B2C,
    EmergencyId = 0x2B2D,
    EmergencyText = 0x2B2E,
    AcsStatus = 0x2B2F,
    AcsDataIn = 0x2B30,
    AcsDataOutNotify = 0x2B31,
    AcsDataOutIndicate = 0x2B32,
    AcsControlPoint = 0x2B33,
    EnhancedBloodPressureMeasurement = 0x2B34,
    EnhancedIntermediateCuffPressure = 0x2B35,
    BloodPressureRecord = 0x2B36,
    RegisteredUser = 0x2B37,
    BredrHandoverData = 0x2B38,
    BluetoothSigData = 0x2B39,
    ServerSupportedFeatures = 0x2B3A,
    PhysicalActivityMonitorFeatures = 0x2B3B,
    GeneralActivityInstantaneousData = 0x2B3C,
    GeneralActivitySummaryData = 0x2B3D,
    CardioRespiratoryActivityInstantaneousData = 0x2B3E,
    CardioRespiratoryActivitySummaryData = 0x2B3F,
    StepCounterActivitySummaryData = 0x2B40,
    SleepActivityInstantaneousData = 0x2B41,
    SleepActivitySummaryData = 0x2B42,
    PhysicalActivityMonitorControlPoint = 0x2B43,
    ActivityCurrentSession = 0x2B44,
    PhysicalActivitySessionDescriptor = 0x2B45,
    PreferredUnits = 0x2B46,
    HighResolutionHeight = 0x2B47,
    MiddleName = 0x2B48,
    StrideLength = 0x2B49,
    Handedness = 0x2B4A,
    DeviceWearingPosition = 0x2B4B,
    FourZoneHeartRateLimits = 0x2B4C,
    HighIntensityExerciseThreshold = 0x2B4D,
    ActivityGoal = 0x2B4E,
    SedentaryIntervalNotification = 0x2B4F,
    CaloricIntake = 0x2B50,
    TmapRole = 0x2B51,
    AudioInputState = 0x2B77,
    GainSettingsAttribute = 0x2B78,
    AudioInputType = 0x2B79,
    AudioInputStatus = 0x2B7A,
    AudioInputControlPoint = 0x2B7B,
    AudioInputDescription = 0x2B7C,
    VolumeState = 0x2B7D,
    VolumeControlPoint = 0x2B7E,
    VolumeFlags = 0x2B7F,
    VolumeOffsetState = 0x2B80,
    AudioLocation = 0x2B81,
    VolumeOffsetControlPoint = 0x2B82,
    AudioOutputDescription = 0x2B83,
    SetIdentityResolvingKey = 0x2B84,
    CoordinatedSetSize = 0x2B85,
    SetMemberLock = 0x2B86,
    SetMemberRank = 0x2B87,
    ApparentEnergy32 = 0x2B89,
    ApparentPower = 0x2B8A,
    Co2Concentration = 0x2B8C,
    CosineOfTheAngle = 0x2B8D,
    DeviceTimeFeature = 0x2B8E,
    DeviceTimeParameters = 0x2B8F,
    DeviceTime = 0x2B90,
    DeviceTimeControlPoint = 0x2B91,
    TimeChangeLogData = 0x2B92,
    MediaPlayerName = 0x2B93,
    MediaPlayerIconObjectId = 0x2B94,
    MediaPlayerIconUrl = 0x2B95,
    TrackChanged = 0x2B96,
    TrackTitle = 0x2B97,
    TrackDuration = 0x2B98,
    TrackPosition = 0x2B99,
    PlaybackSpeed = 0x2B9A,
    SeekingSpeed = 0x2B9B,
    CurrentTrackSegmentsObjectId = 0x2B9C,
    CurrentTrackObjectId = 0x2B9D,
    NextTrackObjectId = 0x2B9E,
    ParentGroupObjectId = 0x2B9F,
    CurrentGroupObjectId = 0x2BA0,
    PlayingOrder = 0x2BA1,
    PlayingOrdersSupported = 0x2BA2,
    MediaState = 0x2BA3,
    MediaControlPoint = 0x2BA4,
    MediaControlPointOpcodesSupported = 0x2BA5,
    SearchResultsObjectId = 0x2BA6,
    SearchControlPoint = 0x2BA7,
    Energy32 = 0x2BA8,
    MediaPlayerIconObjectType = 0x2BA9,
    TrackSegmentsObjectType = 0x2BAA,
    TrackObjectType = 0x2BAB,
    GroupObjectType = 0x2BAC,
    ConstantToneExtensionEnable = 0x2BAD,
    AdvertisingConstantToneExtensionMinimumLength = 0x2BAE,
    AdvertisingConstantToneExtensionMinimumTransmitCount = 0x2BAF,
    AdvertisingConstantToneExtensionTransmitDuration = 0x2BB0,
    AdvertisingConstantToneExtensionInterval = 0x2BB1,
    AdvertisingConstantToneExtensionPhy = 0x2BB2,
    BearerProviderName = 0x2BB3,
    BearerUci = 0x2BB4,
    BearerTechnology = 0x2BB5,
    BearerUriSchemesSupportedList = 0x2BB6,
    BearerSignalStrength = 0x2BB7,
    BearerSignalStrengthReportingInterval = 0x2BB8,
    BearerListCurrentCalls = 0x2BB9,
    ContentControlId = 0x2BBA,
    StatusFlags = 0x2BBB,
    IncomingCallTargetBearerUri = 0x2BBC,
    CallState = 0x2BBD,
    CallControlPoint = 0x2BBE,
    CallControlPointOptionalOpcodes = 0x2BBF,
    TerminationReason = 0x2BC0,
    IncomingCall = 0x2BC1,
    CallFriendlyName = 0x2BC2,
    Mute = 0x2BC3,
    SinkAse = 0x2BC4,
    SourceAse = 0x2BC5,
    AseControlPoint = 0x2BC6,
    BroadcastAudioScanControlPoint = 0x2BC7,
    BroadcastReceiveState = 0x2BC8,
    SinkPac = 0x2BC9,
    SinkAudioLocations = 0x2BCA,
    SourcePac = 0x2BCB,
    SourceAudioLocations = 0x2BCC,
    AvailableAudioContexts = 0x2BCD,
    SupportedAudioContexts = 0x2BCE,
    AmmoniaConcentration = 0x2BCF,
    CarbonMonoxideConcentration = 0x2BD0,
    MethaneConcentration = 0x2BD1,
    NitrogenDioxideConcentration = 0x2BD2,
    NonMethaneVolatileOrganicCompoundsConcentration = 0x2BD3,
    OzoneConcentration = 0x2BD4,
    ParticulateMatterPm1Concentration = 0x2BD5,
    ParticulateMatterPm25Concentration = 0x2BD6,
    ParticulateMatterPm10Concentration = 0x2BD7,
    SulfurDioxideConcentration = 0x2BD8,
    SulfurHexafluorideConcentration = 0x2BD9,
    HearingAidFeatures = 0x2BDA,
    HearingAidPresetControlPoint = 0x2BDB,
    ActivePresetIndex = 0x2BDC,
    FixedString64 = 0x2BDE,
    HighTemperature = 0x2BDF,
    HighVoltage = 0x2BE0,
    LightDistribution = 0x2BE1,
    LightOutput = 0x2BE2,
    LightSourceType = 0x2BE3,
    Noise = 0x2BE4,
    RelativeRuntimeInACorrelatedColorTemperatureRange = 0x2BE5,
    TimeSecond32 = 0x2BE6,
    VocConcentration = 0x2BE7,
    VoltageFrequency = 0x2BE8,
    BatteryCriticalStatus = 0x2BE9,
    BatteryHealthStatus = 0x2BEA,
    BatteryHealthInformation = 0x2BEB,
    BatteryInformation = 0x2BEC,
    BatteryLevelStatus = 0x2BED,
    BatteryTimeStatus = 0x2BEE,
    EstimatedServiceDate = 0x2BEF,
    BatteryEnergyStatus = 0x2BF0,
}

uuid16_enum! { Service Unit Declaration Descriptor Characteristic }
